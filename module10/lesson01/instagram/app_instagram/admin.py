from django.contrib import admin

# Register your models here.
# @admin.register(Post)
# class PostAdmin(admin.ModelAdmin):
#     list_display = ['title', 'slug', 'author', 'publish', 'status']
#     list_filter = ['status', 'created', 'publish', 'author']
#     search_fields = ['title', 'body']
#     prepopulated_fields = {'slug': ('title',)}
#     raw_id_fields = ['author']
#     date_hierarchy = 'publish'
#     ordering = ['status', 'publish']

# Вот что означают различные поля и атрибуты в классе PostAdmin:

# list_display: Это список полей модели, которые будут отображаться на странице списка объектов в админке Django. 
# В данном случае, когда вы откроете страницу с объектами Post, вы увидите колонки для title, slug, author, publish, status.

# list_filter: Это список полей, по которым администраторы могут фильтровать результаты на странице списка объектов в админке Django. 
# В данном случае, в правой части страницы будут доступны фильтры для status, created, publish, author.

# search_fields: Это список полей, по которым будет производиться поиск, когда администратор вводит запрос в поле поиска на странице 
# списка объектов.

# prepopulated_fields: Это словарь, где ключи - это имена полей, которые должны быть предварительно заполнены с использованием 
# значений других полей. В данном случае, поле slug будет автоматически заполнено значением поля title. Это полезно, когда вы 
# хотите автоматически генерировать URL-дружественные слаги из других данных.

# raw_id_fields: Это список полей, которые должны отображаться как элементы ввода Raw ID вместо виджетов по умолчанию. 
# В данном случае, поле author будет отображаться как поле для ввода ID, а не как выпадающий список всех авторов. 
# Это полезно для связей ForeignKey, когда у вас очень много связанных объектов.

# date_hierarchy: Это поле модели, которое Django будет использовать для иерархической навигации по датам на странице списка объектов.

# ordering: Это список полей модели, по которым будут упорядочены объекты на странице списка объектов по умолчанию. 
# Значения можно задать как в порядке возрастания, так и убывания. В данном случае, объекты сначала будут отсортированы 
# по полю status, затем - по полю publish.